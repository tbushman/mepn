doctype html
html
	head
		title= appTitle
		meta(charset='UTF-8')
		meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
		link(rel='stylesheet', href='/stylesheets/leaflet.css')
		link(rel='stylesheet', href='/stylesheets/styles.css')
		script(type='text/javascript', src='/scripts/jquery.min.js')
		script(type='text/javascript', src='/scripts/leaflet.js')
		script(type='text/javascript', src='http://maps.stamen.com/js/tile.stamen.js?v1.3.0')
	body
		block page
		block header
			div.menu
				a(href='/', class=(menu === 'home' && !infowindow ? 'active' : '')) Home
				//-
					a(href='/addfeature', class=(infowindow === 'point' ? 'active' : '')) Add
				//-
					a.draw(href='/addshape', class=(infowindow === 'shape' ? 'active' : '')) Draw
				a(href='/importcsv') Import CSV
				//- 
					button.heat Heat
		block content
		div#map
		
		script(type='text/javascript').
			// http://maps.stamen.com/#terrain
			var stamenLayer = new L.StamenTileLayer('terrain');
			// http://leafletjs.com/reference-1.1.0.html
			var map = new L.map('map', {
				zoomControl: true,
				center: [#{lat}, #{lng}],
				zoom: #{zoom},
				minZoom: 2,
				maxZoom: 18
			});
			
			var center = map.getCenter();
			var lMarker;
			// Stamen base map
			map.addLayer(stamenLayer);
			// Server data
			var data = !{JSON.stringify(data)};
			if (data.length > 0) {
				// generate geographic points from data
				var dataLayer = L.geoJSON(data, {
					// MongoDB stores coordinates as [lng, lat]
					// Leaflet uses [lat, lng]
					onEachFeature: function (feature) {
						if (feature.geometry.type === 'Point') {
							feature.geometry.coordinates.reverse()							
						}
					},
					pointToLayer: function (feature, latlng) {
						if (feature.geometry.type = 'Point') {
							var geojsonMarkerOptions = {
								radius: 11,
								fillColor: '#BAD80A',
								color: '#fff',
								weight: 2,
								opacity: 1,
								fillOpacity: 0.8,
								className: ''+map.latLngToLayerPoint(latlng).x+','+map.latLngToLayerPoint(latlng).y+''
							};
							var circleMarker = L.circleMarker(latlng, geojsonMarkerOptions);
							return circleMarker;
						}
					}
				}).addTo(map);
			}
			// moveable marker
			lMarker = L.marker([center.lat, center.lng], {draggable: true}).addTo(map);
				//pan upon drag
			lMarker.on('dragend', function(event){
				var marker = event.target;
				var position = marker.getLatLng();
				marker.setLatLng(new L.LatLng(position.lat, position.lng),{draggable:'true'});
				map.panTo(new L.LatLng(position.lat, position.lng));
				$.post('/panzoom/'+position.lat+'/'+position.lng+'/'+map.getZoom()+'');
			});
